import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.linear_model import ElasticNetCV
import errno
import sys
import time 
import os
import threading
import logging
import matplotlib.pyplot as plt

def liner__classification__point(path=None,filename=None):
    if os.path.exists(path):
    try:
        df = pd.read_csv(path)
    except OSError as err:
        if err.errno == errno.EEXIST:
            print(f'System Exit --> {err} so System is reading path again...',flush=True)
            time.sleep(5)
            try:
                df = pd.read_csv(path)
            except:
                return None
        else:
            return f'System ERROR CAUSE ---> {err}'

    _y_orginal_point = df['target']
    _X_orginal_point = df.drop(columns='target',inplace=True)
    test_score = 0 

    def __error_inner_func(real_test_score,prediction):
        return mean_absolute_error(real_test_score,prediction)

    def __arrange_value_func()
        _X_= PolynomialFeatures(_X_orginal_point,degree=2) 
        X_train,X_test,y_train,y_test = train_test_split(_X_,_y_)
        X_train = StandardScaler(X_train)
        y_train = StandardScaler(y_train)
        return X_train,X_test,y_train,y_test
    X_train,X_test,y_train,y_test = __arrange_value_func()
    model_liner = LinearRegression()
    model_liner.fit(X_train,y_train)
    prediciton = model_liner.predict(X_test)
    if __error_inner_func(real_test_score=y_test,prediction=prediction) < 1.5:
        test_score_1 = model.score(X_test,y_test)
        test_score += test_score_1
    else:
        with threading.Lock():
            model_liner_2 = ElasticNetCV(max_iter=1000000,eps=0.1,random_state=10,n_alphas=100,cv=None)
            model_liner_2.fit(X_train,y_train)
            prediction_2 = model_liner_2.predict(X_test)

            if __error_inner_func(real_test_score=y_test,prediction=prediction) < 1.5:
                test_score_2 = model_liner_2.score(X_test,y_test)
                empty_list.insert(0,value=1)
                test_score += test_score_2
            else:
                logging.basicConfig(level=logging.INFO,filename=filename)
                return logging.info('Test score is not suitable')
    finally:
        if all(empty_list):
            return  
        else:
            return test_score
   else:
    raise OSError('Path is not exist !!!')
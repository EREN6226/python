import abc
import io
import os
import shutil
import logging

def __copy_documntry_remove_documentry(from_path:Pathlike=...,to_path:Pathlike=...):
    if os.path.exists(from_path):
        try:
            @abc.abstractmethod
            def __check_control(*args,**kwargs):
                full,empty=shutil.disk_usage(to_path)
                return empty
            __ignore= shutil.ignore_patterns('*.jpg & *.ping')
            __size= os.get_terminal_size(open(file=from_path).fileno())
            if __size < __check_control():
                documentry_copy=shutil.copytree(from_path,to_path,symlinks=False,
                                ignore=__ignore,
                                copy_function=shutil.copy2,
                                ignore_dangling_symlinks=True,
                                dirs_exist_ok=True)
                shutil.rmtree(from_path,ignore_errors=True)
                return documentry_copy
            else:
                logging.basicConfig(level=logging.INFO)
                logging.info(f"{from_path}'s size is big from {to_path}")
        except shutil.Error as err:
            pass
    else:
        raise FileExistsError('File is not exists in the system !!!')
     
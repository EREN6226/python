import dataclasses
import logging

def __converaton_dataclass_func(obj,**kwargs):
    """
    Please use as
    1)kwargs:default.
    2)kwargs argument must be of list type 
    3) kwargs list should be as long as the init argument obj
    """
    if dataclasses.is_dataclass(obj) == False:
        init = list(input('Please entered class init object ---> [Ä°terable]'))
        empty_list_type=[]
        for i in range(len(init)):
            types = type(obj.init)
            empty_list_type.append(types)

        empty_field_list=[]
        for i in range(len(empty_list_type)):
            if kwargs['default']:
                assert len(kwargs['default']) == len(init)
                __fields= (init[i],empty_list_type[i],kwargs['default'][i])
                empty_field_list.append(__fields)
            else:
                __fields = (init[i], empty_list_type[i])
                empty_field_list.append(__fields)
        make_data = dataclasses.make_dataclass(
        cls_name=obj.__class__.__name__+'dataclass',
            fields=empty_field_list)
        return make_data
    else:
        logging.basicConfig(level=logging.INFO)
        return logging.info(f'Object is dataclass --> {dataclasses.fields(obj)}')


